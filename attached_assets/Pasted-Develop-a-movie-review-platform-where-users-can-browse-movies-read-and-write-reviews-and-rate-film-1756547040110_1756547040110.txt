Develop a movie review platform where users can browse movies, read and write reviews, and rate films. The application should have a React frontend and a Node.js backend using Express and SQL/MongoDB.RequirementsFrontend (React)Create a responsive UI with the following pages/components:Home page with featured movies and trending filmsMovie listing page with search and filter functionality (by genre, year, rating, etc.)Individual movie page with details, trailers, cast, and reviewsUser profile page with review history and watchlistReview submission form with star ratings and text reviewsMovie watchlist functionalityImplement state management (e.g., using Redux or React Context)Use React Router for navigationIntegrate with the backend APIImplement error handling and loading states Integrate with a movie database API (like TMDB) for movie posters and detailsBackend (Node.js, Express, SQL/MongoDB)Set up a RESTful API with the following endpoints:GET /movies - Retrieve all movies (with pagination and filtering)GET /movies/:id - Retrieve a specific movie with reviewsPOST /movies - Add a new movie (admin only)GET /movies/:id/reviews - Retrieve reviews for a specific moviePOST /movies/:id/reviews - Submit a new review for a movieGET /users/:id - Retrieve user profile and review historyPUT /users/:id - Update user profileGET /users/:id/watchlist - Retrieve user's watchlistPOST /users/:id/watchlist - Add movie to watchlistDELETE /users/:id/watchlist/:movieId - Remove movie from watchlistImplement data validation and error handlingUse PostgreSQL for data persistenceImplement user authentication (registration/login)Calculate and store average ratings for moviesDatabase Schema ConsiderationsMovies: title, genre, release year, director, cast, synopsis, poster URL, average ratingUsers: username, email, password (hashed), profile picture, join dateReviews: user ID, movie ID, rating (1-5 stars), review text, timestampWatchlist: user ID, movie ID, date addedEvaluation CriteriaCode quality and organizationProper use of React hooks and componentsRESTful API design and implementationDatabase schema design and relationshipsError handling and edge case managementUser authentication and authorizationDocumentation clarityUI/UX design considerationsPerformance optimization (pagination, caching, etc.)Bonus Features Movie recommendation system based on user ratingsSocial features (follow other users, see their reviews)Advanced search with multiple filtersMovie trailer integrationAdmin dashboard for managing movies and users